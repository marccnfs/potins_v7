{% set token = extras.token|default(null) %}
{% set qr    = extras.qr|default(null) %}
{% set exp   = extras.expiresAt|default(null) %}
{% set mode  = extras.mode|default(cfg.mode|default('geo')) %}
{% set qrOnly = cfg.qrOnly is iterable ? cfg.qrOnly : {} %}

{% if mode == 'qr_only' %}
    <section>
        <div class="grid2">
            <aside class="card">
                <h2>üìç QR √† cacher</h2>
                <p>Imprime et cache ce QR code √† l‚Äôendroit choisi. Quand il est scann√©, l‚Äô√©tape se valide imm√©diatement et le message d√©fini s‚Äôaffiche sur le t√©l√©phone.</p>

                {% if qr and token %}
                    <img id="qr-validation" src="{{ qr }}" alt="QR localisation" width="280" height="280">
                    <p class="muted">Valable jusqu‚Äô√† {{ exp ? exp|date('H:i') : 'bient√¥t' }}.</p>
                    <p class="muted">Lien direct : <a href="{{ absolute_url(path('mobile_entry', { token: token })) }}" target="_blank" rel="noopener">ouvrir sur mobile</a></p>

                    <div id="qr-status" class="muted">Pr√™t √† √™tre scann√©‚Ä¶</div>

                    <div class="mt">
                        <button id="qr-regen" class="btn btn-light">‚ôªÔ∏è Reg√©n√©rer</button>
                    </div>
                {% else %}
                    <p class="error">QR indisponible. Recharge la page.</p>
                {% endif %}
            </aside>

            <main class="card">
                <h3>Consigne</h3>
                <p>{{ puzzle.prompt|default('Cache le QR code au bon endroit pour d√©bloquer la suite de l‚Äôescape.') }}</p>

                <h4>Message affich√© sur mobile</h4>
                <p>{{ qrOnly.validateMessage|default('Bravo, √©tape valid√©e !') }}</p>

                <h4>QR ¬´ r√©ponse ¬ª √† imprimer</h4>
                {% if extras.answerQr is defined %}
                    <img id="qr-answer" src="{{ extras.answerQr }}" alt="QR r√©ponse" width="220" height="220">
                    <p class="muted">√Ä remettre aux joueurs apr√®s validation. <a href="{{ extras.answerUrl }}" target="_blank" rel="noopener">Ouvrir la page r√©ponse</a>.</p>
                {% else %}
                    <p class="muted">Enregistre l‚Äô√©tape pour g√©n√©rer le QR r√©ponse.</p>
                {% endif %}

                {% if qrOnly.answerBody is defined and qrOnly.answerBody %}
                    <details class="mt">
                        <summary>Aper√ßu du contenu ¬´ r√©ponse ¬ª</summary>
                        <p>{{ qrOnly.answerBody|nl2br }}</p>
                    </details>
                {% endif %}
            </main>
        </div>
    </section>
{% else %}
    <section data-controller="qr-geo"
             data-qr-geo-lat-value="{{ cfg.target.lat }}"
             data-qr-geo-lng-value="{{ cfg.target.lng }}"
             data-qr-geo-radius-value="{{ cfg.radiusMeters|default(150) }}"
             data-qr-geo-ok-message-value="{{ cfg.okMessage|default('Bravo !') }}"
             data-qr-geo-deny-message-value="{{ cfg.denyMessage|default('Hors zone‚Ä¶') }}"
             data-qr-geo-need-https-message-value="{{ cfg.needHttpsMessage|default('HTTPS requis') }}">
        <div class="grid2">
            <aside class="card">
                <h2>üìç QR g√©olocalis√©</h2>
                <p>Scanne ce QR avec ton t√©l√©phone et autorise la localisation. Si tu es dans la bonne zone, l‚Äô√©tape sera valid√©e automatiquement.</p>

                {% if qr and token %}
                    <img id="qr-validation" src="{{ qr }}" alt="QR code" width="280" height="280">
                    <p class="muted">Valable jusqu‚Äô√† {{ exp ? exp|date('H:i') : 'bient√¥t' }}.</p>
                    <p class="muted">Lien direct : <a href="{{ absolute_url(path('mobile_entry', { token: token })) }}" target="_blank" rel="noopener">ouvrir sur mobile</a></p>

                    <div id="qr-status" class="muted">En attente de validation‚Ä¶</div>

                    <div class="mt">
                        <button id="qr-regen" class="btn btn-light">‚ôªÔ∏è Reg√©n√©rer</button>
                    </div>
                {% else %}
                    <p class="error">QR indisponible. Recharge la page.</p>
                {% endif %}
            </aside>

            <main class="card">
                <h3>Consigne</h3>
                <p>{{ puzzle.prompt|default('Rends-toi au bon endroit et valide ta position sur mobile.') }}</p>
                <h4>Objectif</h4>
                <p>{{ cfg.objectif|default('√ätre dans le rayon autoris√© autour du point cible.') }}</p>
            </main>
        </div>
    </section>
{% endif %}

{% if token %}
    <script>
        (() => {
            const statusEl = document.getElementById('qr-status');
            const regenBtn = document.getElementById('qr-regen');
            const qrImg    = document.getElementById('qr-validation');
            let   token    = {{ token|json_encode|raw }};
            const statusUrl = (t) => "{{ path('mobile_link_status', { token:'__T__' }) }}".replace('__T__', t);
            const regenUrl  = "{{ path('play_qr_geo_regen', { slug: eg.shareSlug, step: step }) }}";

            let timer = setInterval(async () => {
                try {
                    const r = await fetch(statusUrl(token), { headers:{'X-Requested-With':'XMLHttpRequest'} });
                    if (!r.ok) return;
                    const j = await r.json();
                    if (j.status === 'used') {
                        if (statusEl) statusEl.textContent = '‚úÖ Valid√© depuis le mobile !';
                        clearInterval(timer);
                        document.dispatchEvent(new CustomEvent('puzzle:solved', { bubbles:true, detail: { step: {{ step }} } }));
                    }
                } catch(e){}
            }, 2000);

            regenBtn?.addEventListener('click', async () => {
                regenBtn.disabled = true;
                try {
                    const r = await fetch(regenUrl, { method:'POST', headers:{'X-Requested-With':'XMLHttpRequest'} });
                    if (!r.ok) throw new Error();
                    const j = await r.json();
                    token = j.token;
                    if (qrImg) qrImg.src = j.qr;
                    if (statusEl) statusEl.textContent = 'QR r√©g√©n√©r√©. Pr√™t pour un nouveau scan.';
                } catch(e) {
                    if (statusEl) statusEl.textContent = 'Erreur de r√©g√©n√©ration.';
                } finally {
                    regenBtn.disabled = false;
                }
            });

            window.addEventListener('beforeunload', () => clearInterval(timer));
        })();
    </script>
{% endif %}
