{% set token = extras.token|default(null) %}
{% set qr    = extras.qr|default(null) %}
{% set exp   = extras.expiresAt|default(null) %}

<section data-controller="qr-geo"
         data-qr-geo-lat-value="{{ cfg.target.lat }}"
         data-qr-geo-lng-value="{{ cfg.target.lng }}"
         data-qr-geo-radius-value="{{ cfg.radiusMeters|default(150) }}"
         data-qr-geo-ok-message-value="{{ cfg.okMessage|default('Bravo !') }}"
         data-qr-geo-deny-message-value="{{ cfg.denyMessage|default('Hors zone‚Ä¶') }}"
         data-qr-geo-need-https-message-value="{{ cfg.needHttpsMessage|default('HTTPS requis') }}">
    <div class="grid2">
        <aside class="card">
            <h2>üìç QR g√©olocalis√©</h2>
            <p>Scanne ce QR avec ton t√©l√©phone et autorise la localisation. Si tu es dans la bonne zone, l‚Äô√©tape sera valid√©e automatiquement.</p>

            {% if qr and token %}
                <img src="{{ qr }}" alt="QR code" width="280" height="280">
                <p class="muted">Valable jusqu‚Äô√† {{ exp ? exp|date('H:i') : 'bient√¥t' }}.</p>
                <p class="muted">Lien direct : <a href="{{ absolute_url(path('mobile_entry', { token: token })) }}" target="_blank" rel="noopener">ouvrir sur mobile</a></p>

                <div id="qr-status" class="muted">En attente de validation‚Ä¶</div>

                <div class="mt">
                    <button id="qr-regen" class="btn btn-light">‚ôªÔ∏è Reg√©n√©rer</button>
                </div>
            {% else %}
                <p class="error">QR indisponible. Recharge la page.</p>
            {% endif %}
        </aside>

        <main class="card">
            <h3>Consigne</h3>
            <p>{{ puzzle.prompt|default('Rends-toi au bon endroit et valide ta position sur mobile.') }}</p>
            <h4>Objectif</h4>
            <p>{{ cfg.objectif|default('√ätre dans le rayon autoris√© autour du point cible.') }}</p>
        </main>
    </div>
   {#  <button data-action="click->qr-geo#check">V√©rifier ma position</button>
    <div data-qr-geo-target="msg" class="mt-2"></div>
   #}
</section>
{% if token %}
    <script>
        (() => {
            const statusEl = document.getElementById('qr-status');
            const regenBtn = document.getElementById('qr-regen');
            let   token    = {{ token|json_encode|raw }};
            const statusUrl = (t) => "{{ path('mobile_link_status', { token:'__T__' }) }}".replace('__T__', t);
            const regenUrl  = "{{ path('play_qr_geo_regen', { slug: eg.shareSlug, step: step }) }}";

            // polling status
            let timer = setInterval(async () => {
                try {
                    const r = await fetch(statusUrl(token), { headers:{'X-Requested-With':'XMLHttpRequest'} });
                    if (!r.ok) return;
                    const j = await r.json();
                    if (j.status === 'used') {
                        statusEl.textContent = '‚úÖ Valid√© depuis le mobile !';
                        clearInterval(timer);
                        // Informe ton HUD que l‚Äô√©tape est valid√©e
                        document.dispatchEvent(new CustomEvent('puzzle:solved', { bubbles:true, detail: { step: {{ step }} } }));
                        // Option: avancer automatiquement √† l‚Äô√©tape suivante
                        // window.location.href = "{{ path('play_step', { slug: eg.shareSlug, step: step+1 }) }}";
                    }
                } catch(e){}
            }, 2000);

            // r√©g√©n√©rer le QR (nouveau token + datauri)
            regenBtn?.addEventListener('click', async () => {
                regenBtn.disabled = true;
                try {
                    const r = await fetch(regenUrl, { method:'POST', headers:{'X-Requested-With':'XMLHttpRequest'} });
                    if (!r.ok) throw new Error();
                    const j = await r.json();
                    token = j.token;
                    document.querySelector('img[alt="QR code"]').src = j.qr;
                    statusEl.textContent = 'QR r√©g√©n√©r√©. En attente de validation‚Ä¶';
                } catch(e) {
                    statusEl.textContent = 'Erreur de r√©g√©n√©ration.';
                } finally {
                    regenBtn.disabled = false;
                }
            });

            // nettoyage si on change de page
            window.addEventListener('beforeunload', () => clearInterval(timer));
        })();
    </script>
{% endif %}
